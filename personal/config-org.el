;;;

(add-to-list 'load-path "~/.emacs.d/pkg/")

(load "auctex.el" nil t t)

(advice-add 'org-babel-latex-tex-to-pdf :before
            (lambda (file)
              (with-temp-buffer
                (insert-file-contents file)
                (beginning-of-buffer)
                (insert "% xelatex\n")
                (write-file file))))


(setq org-latex-create-formula-image-program 'dvipng)
(org-babel-do-load-languages 'org-babel-load-languages '((latex . t) (python . t) (julia . t)))

(defadvice org-html-paragraph (before fsh-org-html-paragraph-advice
                                      (paragraph contents info) activate)
  "Join consecutive Chinese lines into a single long line without
unwanted space when exporting org-mode to html."
  (let ((fixed-contents)
        (orig-contents (ad-get-arg 1))
        (reg-han "[[:multibyte:]]"))
    (setq fixed-contents (replace-regexp-in-string
                          ;; 这一行是匹配上一行末和下一行头都是中文的情况, 但是这样的话遇上"中文\nenglish"就仍然有空格
                          ;; (concat "\\(" reg-han "\\) *\n *\\(" reg-han "\\)")
                          (concat "\\(" reg-han "\\) *\n *")
                          "\\1" orig-contents))
    (ad-set-arg 1 fixed-contents)
    ))
(with-eval-after-load 'ox (require 'ox-pandoc))


(setq org-hide-emphasis-markers t)


(defun org-toggle-iimage-in-org ()
  "display images in your org file"
  (interactive)
  (if (face-underline-p 'org-link)
      (set-face-underline-p 'org-link nil)
    (set-face-underline-p 'org-link t))
  (iimage-mode))

(iimage-mode)

(add-to-list 'load-path "~/.emacs.d/pkg/citeproc-org-0.2.2/")
(load "citeproc-org-setup.el" nil t t)

(add-to-list 'load-path "~/.emacs.d/pkg/org-ref/")
(require 'org-ref)
(require 'citeproc-org)
(citeproc-org-setup)

;; Auto generated by cnfonts
;; <https://github.com/tumashu/cnfonts>
;; (set-face-attribute
;;  'default nil
;;  :font (font-spec :name "-*-Monaco-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1"
;;                   :weight 'normal
;;                   :slant 'normal
;;                   :size 12.5))
;; (dolist (charset '(kana han symbol cjk-misc bopomofo))
;;   (set-fontset-font
;;    (frame-parameter nil 'font)
;;    charset
;;    (font-spec :name "-*-Microsoft YaHei-normal-normal-normal-*-*-*-*-*-p-0-iso10646-1"
;;               :weight 'normal
;;               :slant 'normal
;;               :size 14.5)))

(cnfonts-enable)
(setq cnfonts-use-face-font-rescale t)
(global-visual-line-mode t)
(add-hook 'org-mode-hook 'turn-on-auto-fill)

(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

(setq prelude-whitespace nil)


(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/Nutstore/work/org/todo.org" "Todo soon")
         "* TODO %? \n  %^t")
        ("i" "Idea" entry (file+headline "~/Nutstore/work/org/ideas.org" "Ideas")
         "* %? \n %U")
        ("w" "Work note" entry (file+headline "~/Nutstore/work/org/work.org" "Work")
         "* %? \n")
        ("p" "pcma bss note" entry (file+headline "~/Nutstore/work/org/work.org" "PCMA BSS")
         "* %? \n")
        ("m" "MC note" entry (file+headline "~/Nutstore/work/org/work.org" "Molecular Communication")
         "* %? \n")
        ("l" "Life" entry (file+headline "~/Nutstore/work/org/life.org" "General")
         "* %? \n")
        ("L" "LeLe" entry (file+headline "~/Nutstore/work/org/life.org" "LeLe")
         "* %? \n")
        ))
      
(define-key global-map (kbd "C-c x")  'org-capture)

(setq org-agenda-files (list "~/Nutstore/work/org/todo.org"
                             "~/Nutstore/work/org/ideas.org"
                             "~/Nutstore/work/org/work.org"
                             "~/Nutstore/work/org/life.org"
                             ))

